services:
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      POSTGRES_DB: ${POSTGRES_DB:-vectordb}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myuser} -d ${POSTGRES_DB:-vectordb}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ragbot-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  ragbot-api:
    build:
      context: .
      dockerfile: docker/Dockerfile-api
    image: ragbot-api-image
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-vectordb}
      - DB_USER=${POSTGRES_USER:-myuser}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-mypassword}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-mpnet-base-v2}
      - COLLECTION_NAME=${COLLECTION_NAME:-document_chunks}
      - CHUNK_SIZE=${CHUNK_SIZE:-600}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      - DEFAULT_MODEL_TYPE=${DEFAULT_MODEL_TYPE:-openai}
      - AVAILABLE_MODEL_TYPES=${AVAILABLE_MODEL_TYPES:-openai,ollama}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-tinyllama}
      - OLLAMA_BASE_URL=http://ollama:11434
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./Documents:/app/Documents
      - ./.env:/app/.env
      - ./:/app
    networks:
      - ragbot-network
    command: uvicorn api:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  ragbot-ingest:
    # Reuse the API image instead of rebuilding
    image: ragbot-api-image
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-vectordb}
      - DB_USER=${POSTGRES_USER:-myuser}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-mypassword}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-mpnet-base-v2}
      - COLLECTION_NAME=${COLLECTION_NAME:-document_chunks}
      - CHUNK_SIZE=${CHUNK_SIZE:-600}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      - BATCH_SIZE=${BATCH_SIZE:-500}
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./Documents:/app/Documents
      - ./.env:/app/.env
      - ./:/app
    networks:
      - ragbot-network
    command: python rag/ingest.py
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  ollama:
    build:
      context: .
      dockerfile: docker/Dockerfile-ollama
    environment:
      - MODEL_NAME=${OLLAMA_MODEL:-tinyllama}
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - ragbot-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 12G

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "${WEBUI_PORT:-3000}:8080"
    environment:
      - WEBUI_AUTH_TOKEN=${WEBUI_AUTH_TOKEN:-default_token}
      - CUSTOM_API_KEY=${OPENAI_API_KEY}
      - CUSTOM_API_BASE_URL=http://ragbot-api:8000
      - CUSTOM_API_CONTEXT_SIZE=4096
      - API_BACKEND=custom
      - CORS_ALLOW_ORIGIN=http://localhost:${WEBUI_PORT:-3000}
    volumes:
      - openwebui-data:/app/backend/data
    depends_on:
      ragbot-api:
        condition: service_healthy
    networks:
      - ragbot-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  ragbot-network:
    driver: bridge

volumes:
  pgdata:
  openwebui-data:
  ollama-data: